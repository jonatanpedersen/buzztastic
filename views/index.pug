html
	body
		main.main
		script(src="/socket.io/socket.io.js")
		script(src="https://cdnjs.cloudflare.com/ajax/libs/react/16.0.0/umd/react.development.js")
		script(crossorigin src="https://unpkg.com/react@16/umd/react.development.js")
		script(crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js")

		script.
			async function main () {
				const buttons = await fetch('/api/buttons')
					.then(response => response.json())
					.then(buttons => {
						return buttons.reduce((buttons, button) => {
							buttons[button.buttonId] = button;
							return buttons;
						}, {});
					});

				const socket = io();

				class App extends React.Component {
					constructor () {
						super();
						this.state = {buttonsPressed: {}}
					}

					componentDidMount () {
						const {socket} = this.props;

						socket.on('button-name-updated', message => {
							const {buttons} = this.props;

							console.log(message);
						});

						socket.on('button-pressed', buttonPress => {
							const {buttonsPressed} = this.state;
							const {buttonId, timestamp} = buttonPress;
							const newButtonsPressed = Object.assign({}, buttonsPressed, {[buttonId]: timestamp});
							this.setState({buttonsPressed: newButtonsPressed});
						});
					}

					render () {
						const {buttons} = this.props;
						const {buttonsPressed} = this.state;

						return React.createElement('div', {}, 
							Object.values(buttons).map((button, i) => 
								React.createElement('li', {key: i},
									React.createElement('span', {}, button.name),
									React.createElement('span', {}, buttonsPressed[button.buttonId])
								)
							)
						);
					}
				}

				const mainElement = document.querySelector('.main');
				
				ReactDOM.render(React.createElement(App, {socket, buttons}), mainElement);
			}
			main();
