html
	head
		style.
			.buttons {list-style-type: none; padding: 0;}
			.button {margin: 1rem; padding: 1rem; background-color: #eee; text-align: center;}
			.button__name {font-size: 2rem; font-family: arial;}
	body
		main.main
		script(src="/socket.io/socket.io.js")
		script(src="https://cdnjs.cloudflare.com/ajax/libs/react/16.0.0/umd/react.development.js")
		script(crossorigin src="https://unpkg.com/react@16/umd/react.development.js")
		script(crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js")

		script.
			async function main () {
				const buttons = await fetch('/api/buttons')
					.then(response => response.json())
					.then(buttons => {
						return buttons.reduce((buttons, button) => {
							buttons[button.buttonId] = button;
							return buttons;
						}, {});
					});

				const socket = io();

				class App extends React.Component {
					constructor () {
						super();
						this.state = {buttonsPressed: {}}
					}

					componentDidMount () {
						const {socket} = this.props;

						socket.on('button-name-updated', buttonNameUpdated => {
							const {buttons} = this.props;
							const {buttonId, name} = buttonNameUpdated;

							this.setState({
								buttons: Object.assign({}, buttons, {[buttonId]: Object.assign({}, buttons[buttonId], {name})})
							});
						});

						socket.on('button-pressed', buttonPress => {
							const {buttonsPressed} = this.state;
							const {buttonId, timestamp} = buttonPress;

							const buttonPressed = buttonsPressed[buttonId];

							if (buttonPressed !== undefined) {
								return;
							}

							const pressCount = Object.keys(buttonsPressed).length + 1;

							this.setState({buttonsPressed: Object.assign({}, buttonsPressed, {[buttonId]: pressCount})});
						});
					}

					render () {
						const {buttons} = this.props;
						const {buttonsPressed} = this.state;

						return React.createElement('ul', {className: 'buttons'}, 
							Object.entries(buttonsPressed).map(entry => 
								React.createElement('li', {className: 'button', key: entry[0]},
									React.createElement('span', {className: 'button__name'}, buttons[entry[0]].name),
								)
							)
						);
					}
				}

				const mainElement = document.querySelector('.main');
				
				ReactDOM.render(React.createElement(App, {socket, buttons}), mainElement);
			}

			main();
